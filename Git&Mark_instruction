# Инструкция для работы с Markdown

## Выделение текста

Чтобы выделить текст курсивом,необходимо обрамить его звездочками (*) или знаком нижнего подчеркивания ( _ ) . Например, *вот так*, или _вот так_.

Чтобы выделить текст полужирным,необходимо обрамить его двойными звездочками (**) или двойным знаком нижнего подчеркивания (__) . Например **вот так**, или __вот так__.

Альтернативные способы выделения текста полужирным или курсивом нужны для того,чтобы мы могли совмещать оба способа. Например _текст может быть выделен курсивом и при этом быть **полужирным**_.

## Списки

Чтобы выделить ненумерованный список используйте(*).
Чтобы добавить ненумерованные списки,необходимо пункты выделить звездочкой (*) или знаком +. Например, вот так:
* Элемент 1
* Элемент 2
* Элемент 3
+ Элемент 4

Чтобы добавить нумерованные списки,необходимо их пронумеровать. Например, вот так:
1. Элемент 1
2. Элемент 2
3. Элемент 3


## Работа с изображениями

Чтобы вставить изображение в текст, достаточно написать следующее:![Здесь должна была быть картинка](Owl.jpg)

## Работа с таблицами

Чтобы создать таблицу в Markdown, используйте символы "|" для разделения столбцов и "-" для создания заголовка таблицы.Например:

| Заголовок 1 | Заголовок 2 |
|---|---|
| Ячейка 1  | Ячейка 2  |
| Ячейка 3  | Ячейка 4  |

Дополнительные возможности:

Выравнивание текста в столбцах:

Используйте ":" в строке заголовка, чтобы указать выравнивание.
: слева от --- - выравнивание по левому краю.
: справа от --- - выравнивание по правому краю.
: с обеих сторон от --- - выравнивание по центру.

Пример выравнивания:

| Лево | Центр | Право |
| :--- | :---: | ---: |
| Ячейка 1 | Ячейка 2 | Ячейка 3 |

## Ссылки

Чтобы создать ссылку в Markdown, можно использовать два способа:

1. Встроенная ссылка:

Этот способ позволяет вставить текст ссылки прямо в текст документа. Для этого используйте следующие скобки:

Квадратные скобки [] для текста ссылки, который будет виден пользователю.
Круглые скобки () для URL-адреса, на который будет вести ссылка. Например:
[Яндекс](https://yandex.ru) - популярный поисковик.

2. Ссылка-ссылка:

Этот способ позволяет задать ссылку отдельно от текста, что делает текст более чистым и удобным для чтения. Для этого используйте следующие скобки:

Квадратные скобки [] для текста ссылки, который будет виден пользователю.
Квадратные скобки [] с идентификатором ссылки (любым словом или фразой) после текста.
Двоеточие : после идентификатора ссылки.
Круглые скобки () для URL-адреса, на который будет вести ссылка.
Пример:

Это ссылка на [Яндекс][yandex].

[yandex]: https://yandex.ru

## Цитаты

Чтобы создать цитату в Markdown, используйте знак "больше чем" (>). Поставьте его перед каждой строкой цитаты.

Пример:

> Это цитата.
> Она состоит из двух строк.

Еще можно создавать вложенные цитаты,используя несколько знаков > подряд. Например:

> Это цитата.
>> А это цитата внутри цитаты.

Добавление других элементов Markdown внутри цитаты: Внутри цитаты можно использовать другие элементы Markdown, такие как выделение текста, списки, и даже блоки кода.

## Заключение

Этот документ охватил основные аспекты работы с Markdown - простым, но мощным языком разметки текста. Мы научились выделять текст, создавать списки, добавлять изображения, таблицы, ссылки и цитаты.

Простота и интуитивность Markdown делают его идеальным инструментом для создания документации, заметок, сообщений на форумах и многого другого. Несмотря на свою простоту, Markdown достаточно гибок и позволяет форматировать текст в соответствии с вашими потребностями.

Начните использовать Markdown уже сегодня и оцените все преимущества этого удобного инструмента!

# Инструкция по работе с Git и удаленными репозиториями

## Git -что это?
Git - это система контроля версий, имеющая локальные и удаленные репозитории.

## Установка Git

Чтобы установить Git, следуйте инструкциям для вашей операционной системы:

Windows:

Скачайте последнюю версию установщика Git для Windows с официального сайта: https://git-scm.com/download/win
Запустите скачанный файл (например, Git-2.40.0-64-bit.exe).
Следуйте инструкциям установщика, оставляя все настройки по умолчанию, если не уверены.
Во время установки вам будет предложено выбрать редактор по умолчанию для Git. Выберите тот, который вам удобен (например, Notepad++, Visual Studio Code).
Дождитесь завершения установки.

Проверка установки:

После установки Git на любой операционной системе откройте терминал или командную строку и выполните команду:
git --version

Если установка прошла успешно, вы увидите версию установленного Git.

### Локальный репозиторий
Локальный репозиторий - это копия проекта,хранящаяся на персональном компьютере,где можно
вносить изменения и отслеживать историю изменений.
### Удаленный репозиторий
Удаленный репозиторий - это копия проекта,хранящаяся на сервере,где можно делиться с проектом 
с другими людьми и получать изменения, внесенные ими. 

## Создание репозитория
Репозиторий создается по команде *Git init* , при этом в папке с проектом должна создаться
скрытая папка .git

## Остальные команды Git

### Git add
Для добавления изменений в коммит нужно ввести git add <имя файла>.
### git status
Команда для отслеживания изменений, чтобы увидеть ,были ли внесены какие-либо изменения в репозиторий.
### git commit
Команда для сохранения изменений, нужно ввести git commit -m "message"
### git log
Выводит на экран историю коммитов и их идентификаторов
### git checkout
переход от одного коммита к другому, или от одной ветки к другой. 
Для перехода между коммитами с помощью git checkout нужно указывать
 конкретные идентификаторы коммитов (хеши, теги, ветки).

Например:

git checkout <хеш_коммита>
git checkout <название_ветки>

### git checkout master
Возвращение к текущему состоянию/или на ветку master

### git diff
Посмотреть разницу между сохраненным и текущим файлом

### git branch branch_name
Создает новую ветку -название ветки (branch_name).

### git branch
Показывает все существующие ветки, при этом текущая ветка будет отмечена звездочкой.

### git branch -d branch_name
Удаляет указанную ветку

### git merge branch_name
Вливает в текущую ветку указанную ветку

### git log --graph
Выводит на экран историю коммитов в виде дерева(графа)

# Управление удаленными репозиториями

## Добавление удаленного репозитория

Это можно делать несколькими способами:

1. Создать папку на своем компьютере, не создавать в ней локальный репозиторий, с GitHubа или с другого сервиса  склонировать выбранный репозиторий, и перейти в него с помощью git работать.
 Чтобы перейти в склонированный репозиторий в командной строке Windows, используйте команду cd (change directory) с указанием пути к папке репозитория.

Например, если ваш репозиторий склонирован в папку C:\Users\Admin\Desktop\my-project, то команда будет выглядеть так:

cd C:\Users\Admin\Desktop\my-project
После выполнения этой команды вы окажетесь внутри папки репозитория и сможете начинать работу с ним.

Скачать чужой репозиторий можно и без создания
собственного аккаунта на этом сервисе.

## Cоздание нового репозитория

Для того,чтобы залить свой репозиторий в какой-то сервис, на этом сервисе придётся создать собственный 
аккаунт. Затем:

1. Можно создать новый репозиторий через терминал и начать с этим работать.
2. Уже существующий репозиторий привязать к удалённому репозиторию.
3. Импортировать код из другого репозитория.

### git remote add origin <адрес удаленного репозитория> 
-команда для добавления удаленного репозитория

## Отправка изменений на удаленный репозиторий
Для этого нужно ввести команду git push -u origin master

## Синхронизация изменений удаленного репозитория
Для этого нужно ввести команду git pull origin master
